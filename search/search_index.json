{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"stata_kernel","text":"<p><code>stata_kernel</code> is a Jupyter kernel for Stata. It works on Windows, macOS, and Linux.</p>"},{"location":"#what-is-jupyter","title":"What is Jupyter?","text":"<p>Jupyter is an open-source ecosystem for interactive data science. Originally developed around the Python programming language, Jupyter has grown to interface with dozens of programming languages.</p> <p><code>stata_kernel</code> is the bridge that interactively connects Stata to all the elements in the ecosystem.</p> <ul> <li> <p>JupyterLab is a web-based interactive editor that allows for interweaving of code, text, and results.</p> <ul> <li>Splice models in LaTeX math mode with the code that implements them and the graphs depicting their output.</li> <li>Click here to see an example Jupyter Notebook file using <code>stata_kernel</code>.</li> <li>Jupyter Notebooks can be exported as PDFs or HTML, and are as good for teaching new students as they are for displaying research results.</li> </ul> <p></p> </li> <li> <p>Hydrogen is a package for the Atom text editor that connects with Jupyter kernels to display results interactively in your text editor.</p> </li> <li>The Jupyter console is an enhanced interactive console. Its features include enhanced autocompletion, better searching of history, syntax highlighting, among others. The similar QtConsole even allows displaying plots within the terminal.</li> <li>Enhanced remote work. You can set up Jupyter to run computations remotely but to show results locally. Since the only data passing over the network are the text inputs and outputs from Stata, communcation happens much faster than loading <code>xstata</code>, especially on slower networks. Being able to use Jupyter Notebook or Hydrogen vastly enhances productivity compared to working with the Stata console through a remote terminal.</li> </ul>"},{"location":"#stata_kernel-features","title":"<code>stata_kernel</code> Features","text":"<ul> <li> Supports Windows, macOS, and Linux.</li> <li> Use any type of comments in your code, not just <code>*</code>.</li> <li> Autocompletions as you type based on the variables, macros, scalars, and matrices currently in memory. As of version 1.6.0 it also suggests file paths for autocompletion.</li> <li> Display graphs.</li> <li> Receive results as they appear, not after the entire command finishes.</li> <li> Pull up interactive help files within the kernel.</li> <li> Browse data interactively.</li> <li> <code>#delimit ;</code> interactive support</li> <li> Work with a remote session of Stata.</li> <li> Mata interactive support</li> <li> Cross-session history file</li> </ul>"},{"location":"#screenshots","title":"Screenshots","text":"<p>Atom</p> <p></p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>All types of contributions are welcome. You can:</p> <ul> <li>Submit a bug report</li> <li>Update or add new documentation or examples</li> <li>Add automated tests</li> <li>Submit a pull request for a new feature</li> </ul>"},{"location":"CONTRIBUTING/#bug-reports","title":"Bug reports","text":"<p>The best way to get your issue solved is to provide a minimal, complete, verifiable example. In order to submit a bug report, click here and fill out the template.</p>"},{"location":"CONTRIBUTING/#debugging","title":"Debugging","text":"<p>The following seems to be the easiest way to debug internals:</p> <pre><code>from stata_kernel.kernel import StataKernel\nfrom stata_kernel.code_manager import CodeManager\n\nkernel = StataKernel()\nsession = kernel.stata\n\n# If on windows, may be helpful\nsession.show_gui()\n\ncode = 'sysuse auto, clear'\ncm = CodeManager(code)\ntext_to_run, md5, text_to_exclude = cm.get_text(kernel.conf, session)\nrc, res = session.do(\n    text_to_run, md5, text_to_exclude=text_to_exclude, display=False)\n</code></pre>"},{"location":"CONTRIBUTING/#tests","title":"Tests","text":""},{"location":"CONTRIBUTING/#adding-tests","title":"Adding tests","text":"<p>Tests are contained in the Python files in the <code>tests/</code> folder. The <code>test_stata_lexer.py</code> and <code>test_mata_lexer.py</code> files run automated tests on the code Stata kernel uses to parse user input.</p>"},{"location":"CONTRIBUTING/#running-tests","title":"Running tests","text":"<p>To run the tests, you need to install <code>pytest</code> and <code>jupyter_kernel_test</code>: <pre><code>pip install pytest jupyter_kernel_test\n</code></pre></p> <p>From the project root, to run all tests, run</p> <pre><code>pytest tests/\n</code></pre> <p>To run just the non-automated tests that depend on having Stata available locally, run</p> <pre><code>pytest tests/test_kernel.py\n</code></pre> <p>For each of the above, if you get a <code>ModuleNotFound</code> error, you may need to use <code>python -m pytest tests/</code>.</p>"},{"location":"CONTRIBUTING/#updating-the-docs","title":"Updating the docs","text":"<p>First install <code>mkdocs</code>:</p> <pre><code>pip install mkdocs mkdocs-material\n</code></pre> <p>Then <code>cd</code> to the docs folder: <pre><code>cd docs/\n</code></pre></p> <p>Then to serve the documentation website in real time, run <pre><code>mkdocs serve\n</code></pre> This starts a web server on localhost, usually on port 8000. So you can open your web browser and type in <code>localhost:8000</code>, click Enter, and you should see the website. This will update in real time as you write more documentation.</p> <p>To create a static website, run: <pre><code>mkdocs build\n</code></pre></p> <p>To publish the website to the documentation website (if you have repository push access) run: <pre><code>mkdocs gh-deploy\n</code></pre></p>"},{"location":"CONTRIBUTING/#releasing-new-versions","title":"Releasing new versions","text":"<p>To increment version numbers, run one of: <pre><code>bumpversion major\nbumpversion minor\nbumpversion patch\n</code></pre> in the project's root directory. This will also automatically create a git commit and tag of the version. Then push with:</p> <pre><code>git push origin master --tags\n</code></pre> <p>so that Github sees the newest tag.</p> <p>Then to release:</p> <p><pre><code>python setup.py sdist bdist_wheel\npython -m twine upload dist/stata_kernel-VERSION*\n</code></pre> and put in the PyPI username and password.</p>"},{"location":"addendum/","title":"Addendum","text":"<p>As an ardent open-source advocate and someone who actively dislikes using Stata, it somewhat pains me that my work creates value for a proprietary, closed-source program. I hope that this program improves research in a utilitarian way, and shows to new users the scope of the open-source tools that have existed for upwards of a decade.</p>"},{"location":"addendum/#contributors","title":"Contributors","text":"<ul> <li>Kyle Barron</li> <li>Mauricio C\u00e1ceres</li> <li>Full list of contributors</li> </ul>"},{"location":"comparison_with_ipystata/","title":"Comparison with IPyStata","text":""},{"location":"comparison_with_ipystata/#stata_kernel-is-faster-with-larger-datasets","title":"<code>stata_kernel</code> is faster with larger datasets","text":"<p><code>stata_kernel</code> takes a different approach to communication with Stata. With <code>IPyStata</code> on macOS and Linux, to run each segment of code</p> <ol> <li>Your data has to be moved from Python to Stata</li> <li>Run the commands in Stata</li> <li>Return the data to Python to save it for the next command</li> </ol> <p>This process is prohibitive with larger amounts of data. In contrast, <code>stata_kernel</code> controls Stata directly, so it generally is no slower than using the Stata program itself.</p>"},{"location":"comparison_with_ipystata/#stata_kernel-provides-more-features","title":"<code>stata_kernel</code> provides more features","text":"<p><code>stata_kernel</code> is a pure Jupyter kernel, whereas IPyStata is a Jupyter magic within the Python kernel. This means that with <code>stata_kernel</code></p> <ul> <li>You don't have to include <code>%%stata</code> at the beginning of every cell.</li> <li>You get features like autocompletion and being able to use <code>;</code> as a delimiter.</li> <li>You see intermediate results of long-running commands without waiting for the entire command to have finished.</li> <li>You can create multiple graphs in the same cell without having to name each of them individually. (Order of the graphs is also guaranteed).</li> <li>You don't have to have any knowledge whatsoever of Python <sup>1</sup>.</li> </ul> <ol> <li> <p>Python is amazing language, and if you want to move on to bigger data, I highly recommend learning Python. Now that <code>stata_kernel</code> is installed, if you want to start a Python notebook instead of a Stata notebook, just choose New &gt; Python 3 in the dropdown menu.\u00a0\u21a9</p> </li> </ol>"},{"location":"getting_started/","title":"Getting Started","text":"<p>It doesn't take much to get <code>stata_kernel</code> up and running. Here's how:</p>"},{"location":"getting_started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Stata. A currently-licensed version of Stata must already be installed. <code>stata_kernel</code> has been reported to work with at least Stata 13+, and may work with Stata 12.</li> <li> <p>Python. In order to install the kernel, Python 3.5, 3.6, or 3.7 needs to be installed on the computer on which Stata is running.</p> <p>I suggest installing the Anaconda distribution. This doesn't require administrator privileges, and is the simplest way to install Python and many of the most popular scientific packages.</p> <p>The full Anaconda installation is quite large, and includes many libraries for Python that <code>stata_kernel</code> doesn't use. If you don't plan to use Python and want to use less disk space, install Miniconda, a bare-bones version of Anaconda. Then when installing the package any other necessary dependencies will be downloaded automatically.</p> </li> </ul> Windows-specific steps <p>In order to let <code>stata_kernel</code> talk to Stata, you need to link the Stata Automation library:</p> <ol> <li>In the installation directory (most likely <code>C:\\Program Files (x86)\\Stata15</code> or similar), right-click on the Stata executable, for example, <code>StataSE.exe</code>. Choose <code>Create Shortcut</code>. Placing it on the Desktop is fine.</li> <li>Right-click on the newly created <code>Shortcut to StataSE.exe</code>, choose <code>Property</code>, and append <code>/Register</code> to the end of the Target field. So if the target is currently <code>\"C:\\Program Files\\Stata15\\StataSE.exe\"</code>, change it to <code>\"C:\\Program Files\\Stata15\\StataSE.exe\" /Register</code>. Click <code>OK</code>.</li> <li>Right-click on the updated <code>Shortcut to StataSE.exe</code>; choose <code>Run as administrator</code>.</li> </ol>"},{"location":"getting_started/#package-install","title":"Package Install","text":"<p>If you use Anaconda or Miniconda, from the Anaconda Prompt run:</p> <pre><code>conda install -c conda-forge stata_kernel\npython -m stata_kernel.install\n</code></pre> <p>If you do not use Anaconda/Miniconda, from a terminal or command prompt run:</p> <pre><code>pip install stata_kernel\npython -m stata_kernel.install\n</code></pre> <p>If Python 2 is the default version of Python on your system, you may need to use <code>python3</code> instead of <code>python</code> for the <code>python3 -m stata_kernel.install</code> step.</p>"},{"location":"getting_started/#jupyter","title":"Jupyter","text":"<p>If you chose to install Anaconda you already have Jupyter Notebook and Jupyter Lab installed.</p> <p>Otherwise, you need to install Jupyter Notebook or Jupyter Lab. I recommend the latter as it is a similar but more modern environment. If you have Miniconda, open the Anaconda Prompt and run:</p> <pre><code>conda install jupyterlab\n</code></pre> <p>If you use pip, you can install it via:</p> <pre><code>pip install jupyterlab\n</code></pre> <p>If you would not like to install Jupyter Lab and only need the Notebook, you can install it by running</p> <pre><code>conda install notebook\n</code></pre> <p>or</p> <pre><code>pip install notebook\n</code></pre> <p>depending on your package manager.</p> <p>In order to get syntax highlighting in Jupyter Lab, run: <pre><code>conda install -c conda-forge nodejs -y\njupyter labextension install jupyterlab-stata-highlight\n</code></pre></p> <p>If you didn't install Python from Anaconda/Miniconda, the <code>conda</code> command won't work and you'll need to install Node.js directly before running <code>jupyter labextension install</code>.</p>"},{"location":"getting_started/#upgrading","title":"Upgrading","text":"<p>To upgrade from a previous version of <code>stata_kernel</code>, from a terminal or command prompt run</p> <p><pre><code>conda update stata_kernel -y\n</code></pre> in the case of Anaconda/Miniconda or</p> <p><pre><code>pip install stata_kernel --upgrade\n</code></pre> otherwise.</p> <p>When upgrading, you don't have to run <code>python -m stata_kernel.install</code> again.</p>"},{"location":"getting_started/#using","title":"Using","text":"<p>Next, read more about Jupyter and its different interfaces or about how to use the Stata kernel, specifically.</p>"},{"location":"license/","title":"License","text":""},{"location":"license/#gnu-general-public-license","title":"GNU GENERAL PUBLIC LICENSE","text":"<p>Version 3, 29 June 2007</p> <p>Copyright (C) 2007 Free Software Foundation, Inc. fsf.org/</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"license/#preamble","title":"Preamble","text":"<p>The GNU General Public License is a free, copyleft license for software and other kinds of works.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.</p> <p>Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.</p> <p>For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.</p> <p>Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.</p> <p>Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"license/#terms-and-conditions","title":"TERMS AND CONDITIONS","text":""},{"location":"license/#0-definitions","title":"0. Definitions.","text":"<p>\"This License\" refers to version 3 of the GNU General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>"},{"location":"license/#1-source-code","title":"1. Source Code.","text":"<p>The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p>"},{"location":"license/#2-basic-permissions","title":"2. Basic Permissions.","text":"<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>"},{"location":"license/#3-protecting-users-legal-rights-from-anti-circumvention-law","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law.","text":"<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p>"},{"location":"license/#4-conveying-verbatim-copies","title":"4. Conveying Verbatim Copies.","text":"<p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>"},{"location":"license/#5-conveying-modified-source-versions","title":"5. Conveying Modified Source Versions.","text":"<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <ul> <li>a) The work must carry prominent notices stating that you modified     it, and giving a relevant date.</li> <li>b) The work must carry prominent notices stating that it is     released under this License and any conditions added under     section 7. This requirement modifies the requirement in section 4     to \"keep intact all notices\".</li> <li>c) You must license the entire work, as a whole, under this     License to anyone who comes into possession of a copy. This     License will therefore apply, along with any applicable section 7     additional terms, to the whole of the work, and all its parts,     regardless of how they are packaged. This License gives no     permission to license the work in any other way, but it does not     invalidate such permission if you have separately received it.</li> <li>d) If the work has interactive user interfaces, each must display     Appropriate Legal Notices; however, if the Program has interactive     interfaces that do not display Appropriate Legal Notices, your     work need not make them do so.</li> </ul> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>"},{"location":"license/#6-conveying-non-source-forms","title":"6. Conveying Non-Source Forms.","text":"<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <ul> <li>a) Convey the object code in, or embodied in, a physical product     (including a physical distribution medium), accompanied by the     Corresponding Source fixed on a durable physical medium     customarily used for software interchange.</li> <li>b) Convey the object code in, or embodied in, a physical product     (including a physical distribution medium), accompanied by a     written offer, valid for at least three years and valid for as     long as you offer spare parts or customer support for that product     model, to give anyone who possesses the object code either (1) a     copy of the Corresponding Source for all the software in the     product that is covered by this License, on a durable physical     medium customarily used for software interchange, for a price no     more than your reasonable cost of physically performing this     conveying of source, or (2) access to copy the Corresponding     Source from a network server at no charge.</li> <li>c) Convey individual copies of the object code with a copy of the     written offer to provide the Corresponding Source. This     alternative is allowed only occasionally and noncommercially, and     only if you received the object code with such an offer, in accord     with subsection 6b.</li> <li>d) Convey the object code by offering access from a designated     place (gratis or for a charge), and offer equivalent access to the     Corresponding Source in the same way through the same place at no     further charge. You need not require recipients to copy the     Corresponding Source along with the object code. If the place to     copy the object code is a network server, the Corresponding Source     may be on a different server (operated by you or a third party)     that supports equivalent copying facilities, provided you maintain     clear directions next to the object code saying where to find the     Corresponding Source. Regardless of what server hosts the     Corresponding Source, you remain obligated to ensure that it is     available for as long as needed to satisfy these requirements.</li> <li>e) Convey the object code using peer-to-peer transmission,     provided you inform other peers where the object code and     Corresponding Source of the work are being offered to the general     public at no charge under subsection 6d.</li> </ul> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>"},{"location":"license/#7-additional-terms","title":"7. Additional Terms.","text":"<p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <ul> <li>a) Disclaiming warranty or limiting liability differently from the     terms of sections 15 and 16 of this License; or</li> <li>b) Requiring preservation of specified reasonable legal notices or     author attributions in that material or in the Appropriate Legal     Notices displayed by works containing it; or</li> <li>c) Prohibiting misrepresentation of the origin of that material,     or requiring that modified versions of such material be marked in     reasonable ways as different from the original version; or</li> <li>d) Limiting the use for publicity purposes of names of licensors     or authors of the material; or</li> <li>e) Declining to grant rights under trademark law for use of some     trade names, trademarks, or service marks; or</li> <li>f) Requiring indemnification of licensors and authors of that     material by anyone who conveys the material (or modified versions     of it) with contractual assumptions of liability to the recipient,     for any liability that these contractual assumptions directly     impose on those licensors and authors.</li> </ul> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>"},{"location":"license/#8-termination","title":"8. Termination.","text":"<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>"},{"location":"license/#9-acceptance-not-required-for-having-copies","title":"9. Acceptance Not Required for Having Copies.","text":"<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>"},{"location":"license/#10-automatic-licensing-of-downstream-recipients","title":"10. Automatic Licensing of Downstream Recipients.","text":"<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>"},{"location":"license/#11-patents","title":"11. Patents.","text":"<p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>"},{"location":"license/#12-no-surrender-of-others-freedom","title":"12. No Surrender of Others' Freedom.","text":"<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>"},{"location":"license/#13-use-with-the-gnu-affero-general-public-license","title":"13. Use with the GNU Affero General Public License.","text":"<p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.</p>"},{"location":"license/#14-revised-versions-of-this-license","title":"14. Revised Versions of this License.","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>"},{"location":"license/#15-disclaimer-of-warranty","title":"15. Disclaimer of Warranty.","text":"<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"license/#16-limitation-of-liability","title":"16. Limitation of Liability.","text":"<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"license/#17-interpretation-of-sections-15-and-16","title":"17. Interpretation of Sections 15 and 16.","text":"<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"using_jupyter/atom/","title":"Hydrogen in Atom","text":"<p>Hydrogen is a package for the Atom text editor that connects with Jupyter kernels, such as <code>stata_kernel</code>, to display results interactively inside the text editor.</p> <p>I'll go over how to install Atom and Hydrogen, and then provide a quick overview of Hydrogen's capabilities. For more information on how to use Hydrogen, see Hydrogen's documentation.</p>"},{"location":"using_jupyter/atom/#installation","title":"Installation","text":"<p>Atom and Hydrogen are both free and open source software, just like <code>stata_kernel</code>. The download and install is free and easy.</p>"},{"location":"using_jupyter/atom/#atom","title":"Atom","text":"<p>Go to atom.io, choose the installer for your operating system, then double click the downloaded file.</p>"},{"location":"using_jupyter/atom/#hydrogen","title":"Hydrogen","text":"<p>Next you'll need to install a couple add-on packages:</p> <ul> <li>Hydrogen: this connects to Jupyter kernels and allows you to view results in-line next to your code. You can use it with Python, R, and Julia, as well as Stata.</li> <li>language-stata: this provides syntax highlighting for Stata code and is necessary so that Hydrogen knows that a file with extension <code>.do</code> is a Stata file.</li> </ul> <p>To install these, go to the Atom Settings. You can get there by clicking Preferences &gt; Settings in the menus or by using the keyboard shortcut Ctrl+, (Cmd-, on macOS). Then click Install on the menu in the left, and type in <code>Hydrogen</code>, and <code>language-stata</code>, and click <code>Install</code>.</p> <p>Once those are installed, open a do-file and run Ctrl-Enter (Cmd-Enter on macOS) to start the Stata kernel.</p>"},{"location":"using_jupyter/atom/#using-atom","title":"Using Atom","text":"<p>If you've never used Atom before, you're in luck, because it's quite simple and intuitive to use. Read here for some basics about how to use Atom.</p> <p>The most important thing to know is that you can access every command available to you in Atom by using the keyboard shortcut Ctrl+Shift+P (Cmd+Shift+P on macOS). This brings up a menu, called the Command Palette, where you can find any command that any package provides.</p>"},{"location":"using_jupyter/atom/#running-code","title":"Running code","text":"<p>There are three main ways to run code using Hydrogen:</p> <ul> <li>Selection. Manually select/highlight the lines you want to send to Stata and then run <code>Hydrogen: Run</code>, which is usually bound to Ctrl-Enter.</li> <li>Cursor block. When <code>Hydrogen: Run</code> is called and no code is selected, Hydrogen runs the current line. If code following the present line is more indented than the current line, Hydrogen will run the entire indented block.</li> <li>Cell. A cell is a block of lines to be executed at once. They are defined using <code>%%</code> inside comments. See here for more information.</li> </ul>"},{"location":"using_jupyter/atom/#output","title":"Output","text":"<p>Output will display directly beside or beneath the block of code that was selected to be run. Code that does not produce any output will show a check mark when completed.</p>"},{"location":"using_jupyter/atom/#watch-expressions","title":"Watch Expressions","text":"<p>Hydrogen allows for watch expressions. These are expressions that are automatically re-run after every command sent to the kernel. This is convenient for viewing regression output, graphs, or the data set after changing a parameter.</p> <p>Note that since the watch expression is run after every command, it shouldn't be something that changes the state of the data. For example, <code>replace mpg = mpg * 2</code> would be unwise to set as a watch expression because that would change the column's data after every command.</p> <p>Using watch expressions with a graph: </p> <p>Using watch expressions to browse data: </p>"},{"location":"using_jupyter/atom/#indentation-and-for-loops","title":"Indentation and for loops","text":"<p>Stata <code>foreach</code> loops and programs must be sent as a whole to the kernel. If you send only part of a loop, you'll receive a reply that insufficient input was provided.</p> <p>The easiest way to make sure that this happens is to indent all code pertaining to a block. This will ensure all lines of the block are sent to <code>stata_kernel</code>, even if the ending <code>}</code> has the same indentation as the initial line.</p> <p>If the cursor is anywhere on the first line in the segment below, and you run Ctrl-Enter or Shift-Enter (which moves your cursor to the next line), it will include the final <code>}</code>.</p> <pre><code>foreach i in 1 2 3 4 {\n    display \"`i'\"\n}\n</code></pre>"},{"location":"using_jupyter/console/","title":"Jupyter Console","text":"<p>To use it as a console, in your terminal or command prompt run: <pre><code>jupyter console --kernel stata\n</code></pre></p> <p>Example:</p> <p></p>"},{"location":"using_jupyter/intro/","title":"Introduction to Jupyter","text":"<p>There are many different ways to use Jupyter. I'll briefly explain several ways of using Jupyter and provide links to more documentation. The information in this section is common to all languages Jupyter supports. Using the Stata Kernel has information specific to using Stata with Jupyter.</p> <p>If you're unsure which to use, choose JupyterLab.</p> <ul> <li>JupyterLab: This is an interactive web-based editor that improves upon the classic Notebook by making it easy to work with several files at the same time in the same window. Users familiar with RStudio may like this.</li> <li>Hydrogen for Atom: This is a plugin for the Atom text editor that displays results in line with your code. It's my personal favorite.</li> <li>Jupyter Notebook: This is the classic interactive web-based editor.</li> <li>Nteract: This is a desktop application to work with Jupyter Notebook files. Some may prefer it to the classic web interface of Jupyter Notebooks.</li> <li>Jupyter Console: This is an enhanced REPL that lives in the console.</li> <li>Jupyter QtConsole: An enhanced console that additionally supports graphs and other rich-text displays.</li> <li>Working remotely: Any of these tools can be used to edit code on your local computer and have the code run on a remote Unix/Linux server.</li> </ul>"},{"location":"using_jupyter/lab/","title":"JupyterLab","text":"<p>Jupyter Lab is the successor to Jupyter Notebook, and allows for having multiple documents side-by-side.</p>"},{"location":"using_jupyter/lab/#starting-jupyterlab","title":"Starting JupyterLab","text":"<p>You can start JupyterLab by running:</p> <pre><code>jupyter lab\n</code></pre> <p>in your terminal or command prompt. Just like the Notebook, this should open up a page in your browser, where you can open a new Stata notebook or console.</p>"},{"location":"using_jupyter/lab/#syntax-highlighting","title":"Syntax highlighting","text":"<p>To enable syntax highlighting for Stata with JupyterLab, you need to run (only once):</p> <pre><code>conda install -c conda-forge nodejs -y\njupyter labextension install jupyterlab-stata-highlight\n</code></pre> <p>If you didn't install Python from Anaconda, the <code>conda</code> command won't work and you'll need to install Node.js directly before running <code>jupyter labextension install</code>.</p>"},{"location":"using_jupyter/lab/#plugins","title":"Plugins","text":"<p>One of the benefits of JupyterLab over the Notebook is that it was designed for extensibility. There's a growing list of plugins that can be used with JupyterLab. Here's an unofficial list: mauhai/awesome-jupyterlab</p>"},{"location":"using_jupyter/lab/#more-info","title":"More info","text":"<p>Project documentation website: jupyterlab.readthedocs.io/en/stable/</p> <p></p>"},{"location":"using_jupyter/notebook/","title":"Jupyter Notebook","text":"<p>You can start the Jupyter Notebook server by running</p> <pre><code>jupyter notebook\n</code></pre> <p>in your terminal or command prompt. That should open up your browser to the Jupyter home screen. Click the New  drop down menu in the top right and choose <code>Stata</code> from the list to start a new notebook using Stata as your default kernel.</p> <p>Below is a gif that shows each step of this process.</p> <p>Click here for more documentation.</p> <p></p>"},{"location":"using_jupyter/nteract/","title":"Nteract","text":"<p>Nteract is a desktop-based computing environment to work with Jupyter Notebook files. It can load and save Jupyter Notebook files and export to PDFs, including output.</p> <p>You can download the software from nteract.io.</p> <p>(It's helpful to know that you can use Ctrl+Space to trigger autocompletions in Nteract.)</p> <p>Below is an example screenshot of using Nteract, followed by its PDF output.</p> <p></p> <p></p>"},{"location":"using_jupyter/qtconsole/","title":"Jupyter QtConsole","text":"<p>The Qt console is a very lightweight application that largely feels like a terminal, but provides a number of enhancements only possible in a GUI, such as inline figures, proper multi-line editing with syntax highlighting, graphical calltips, and much more. The Qt console can use any Jupyter kernel.</p> <p>Project documentation website: qtconsole.readthedocs.io/en/stable/</p> <p></p>"},{"location":"using_jupyter/remote/","title":"Remote Unix/Linux Servers","text":""},{"location":"using_jupyter/remote/#introduction","title":"Introduction","text":"<p>There are two ways to use Jupyter on a remote Unix/Linux server.</p> <ul> <li> <p>The less-usable way, but which is simpler to get started with, is simply using Jupyter Console within a remote terminal. This gives you many\u2014but not all\u2014of the features of <code>stata_kernel</code>, including syntax highlighting, free-flowing comments, autocompletions, and <code>#delimit ;</code> support. To do this, all you need to do is install <code>stata_kernel</code> on the remote server (Stata must also be installed on that remote server).</p> </li> <li> <p>The much more powerful way to run Jupyter on a remote server is to set it up so that you're working with JupyterLab in your local web browser, or with Hydrogen in Atom running locally, but where all the computation happens on the remote server. This is a little more involved to set up, but, once running, makes working on a remote server effortless.</p> </li> </ul> <p>The rest of this document explains how to set up the latter method.</p> <p>Warning</p> <p>It's important to understand the security implications of allowing remote access to your machine. An improperly configured server or a Jupyter Notebook server without a password could allow an attacker to run arbitrary code on your computer, conceivably accessing private data or deleting files.</p>"},{"location":"using_jupyter/remote/#overview","title":"Overview","text":"<p>This setup is one of my favorite parts of Jupyter. Since very little information is sent back and forth, this setup has very low latency, which means that it's fast even on slower networks. With this setup, if you're waiting on output, it's likely because Stata is slow, not the connection.</p> <p>When using a program like <code>tmux</code> or <code>screen</code> on the server, you can reconnect to the same Jupyter kernel (and thus the same Stata session) after becoming disconnected from the network (i.e. if a VPN times out). In contrast, with a normal console or GUI Stata session, there is no way to reconnect to the running Stata session, and you'd have to recreate the state of the environment from scratch.</p> <p>To understand how to set this up, it's helpful to know a bit about how Jupyter works. Jupyter has a \"client-server model\":</p> <ul> <li>the client (i.e. the Notebook, Hydrogen, or console) accepts user input and displays output.</li> <li>the server (the Jupyter internals) receives input from the client, forwards it to Stata, retrieves the results, and sends them back to the client.</li> </ul> <p>Usually, both the client and server run on the same computer. However, this is not a requirement; they just need to be able to communicate with each other.</p> <p>When working with remote servers, you'll instead run the client on the computer you're physically at and the server on the computer on which computation should happen.</p>"},{"location":"using_jupyter/remote/#network-ports","title":"Network Ports","text":"<p>A network port is a numbered entity that defines what type of communication to access.</p> <p>For example, HTTP which defines how websites are loaded in your browser, runs on a specific port (80). So going to example.com in your browser is the same as going to example.com:80. The <code>:80</code> is just usually omitted.</p> <p>Instead of loading web pages, we need to configure it so that your browser loads the data from Jupyter.</p> <p>By default, the Jupyter server process runs on port <code>8888</code>. This is why, when you run Jupyter Notebook on your local machine, you'll usually see <code>http://localhost:8888</code> in the address bar. This means that the Jupyter server process is emitting data on port <code>8888</code> on the local computer.</p> <p>When working with Jupyter remotely, you'll have to know what port Jupyter is running on so that you can forward the remote port to your local computer during the SSH connection. This is the core of the step that connects the server process on the remote computer to the client process on the local computer.</p>"},{"location":"using_jupyter/remote/#set-up","title":"Set up","text":"<p>There are two options for what to use on the server:</p> <ul> <li>Jupyter Notebook Server: This is relatively simple to set up and does not need administrator privileges. Though not designed for use on a multi-user server, it is possible to use on one.</li> <li>JupyterHub: This is Jupyter's official solution for servers with multiple users. This is much more difficult to set up (and might need administrator privileges) and I won't go into details here.</li> </ul> <p>The rest of this guide assumes you're installing the Jupyter Notebook server. Full documentation is here.</p> <p>Info</p> <p><code>stata_kernel</code> must be installed on the server, the computer that is doing the computations. Neither Jupyter nor <code>stata_kernel</code> (nor Stata) needs to be installed on the client computer.</p> <p>The following instructions assume you are able to connect to the remote server through SSH. Setting up an SSH server is outside the scope of this guide.</p>"},{"location":"using_jupyter/remote/#creating-the-configuration-file","title":"Creating the configuration file","text":"<p>On the server computer run in a terminal</p> <pre><code>jupyter notebook --generate-config\n</code></pre> <p>This creates a configuration file at one of three locations on the remote computer:</p> <ul> <li>Windows: <code>C:\\Users\\USERNAME\\.jupyter\\jupyter_notebook_config.py</code></li> <li>OS X: <code>/Users/USERNAME/.jupyter/jupyter_notebook_config.py</code></li> <li>Linux: <code>/home/USERNAME/.jupyter/jupyter_notebook_config.py</code></li> </ul>"},{"location":"using_jupyter/remote/#connecting-with-ssh","title":"Connecting with SSH","text":""},{"location":"using_jupyter/remote/#linux-and-macos","title":"Linux and macOS","text":"<p>A usual SSH connection can be created from the terminal by running:</p> <pre><code>ssh username@host\n</code></pre> <p>In order to connect to the remote Jupyter session, we need to forward the port that Jupyter is running on from the remote computer to the local computer. If Jupyter is running on port <code>8888</code>, we can forward the remote port to the same local port by running</p> <pre><code>ssh username@host -L 8888:localhost:8888\n</code></pre>"},{"location":"using_jupyter/remote/#windows","title":"Windows","text":"<p>Here's information for how to forward a remote port using Mobaxterm. In MobaXterm, go to Tools &gt; MobaxtermTunnel &gt; New and select <code>Local port forwarding</code>. The most common configuration, clockwise from left, is:</p> <ul> <li><code>8888</code></li> <li><code>localhost</code></li> <li><code>8888</code></li> <li>the server hostname, i.e. <code>server.org</code> or its full IP address</li> <li>your username, i.e. <code>john_doe</code></li> <li><code>22</code></li> </ul> <p>Full explanation, clockwise from left</p> <ul> <li>The \"My computer with MobaXterm\" box on the left (<code>12345</code> in the image) is customarily <code>8888</code>, though it can be any 4- or 5-digit number. This is the number you'll type into your local web browser, i.e. <code>http://localhost:8888</code>.</li> <li>The \"Remote server\" box in the top right should usually have <code>localhost</code> and then the port on which Jupyter is running. Usually this is <code>8888</code>.</li> <li>The \"SSH server\" box in the bottom right should have your server's hostname and username, and the port on which SSH is running (usually <code>22</code>).</li> </ul>"},{"location":"using_jupyter/remote/#starting-jupyter-notebook","title":"Starting Jupyter Notebook","text":"<p>Run <code>jupyter notebook --no-browser --port=8888</code> in the remote terminal.</p> <p>On your local computer, go to <code>http://localhost:8888</code>. It should ask you for a token to sign in, which normally will be printed in the remote console once Jupyter Notebook starts.</p> <p>Then you can start a Jupyter Notebook session with the Stata kernel like usual.</p> <p>Here's more documentation for connecting to a remote kernel from Hydrogen. You can even connect to multiple servers at the same time.</p>"},{"location":"using_stata_kernel/configuration/","title":"Configuration","text":"<p>The configuration file is a plain text file named <code>.stata_kernel.conf</code> and is located in your home directory, or defined by the environmental variable <code>STATA_KERNEL_USER_CONFIG_PATH</code>. Settings must be under the heading <code>[stata_kernel]</code>. You can change any of the package's settings by opening the file and changing the <code>value</code> of any line of the form</p> <pre><code>configuration_setting_name = value\n</code></pre> <p>You can also make changes to the configuration while the kernel is running with the %set magic. For example:</p> <pre><code>%set autocomplete_closing_symbol False\n%set graph_format png\n</code></pre> <p>If you want these changes to be stored permanently, add <code>--permanently</code>: <pre><code>%set graph_format png --permanently\n</code></pre></p> <p>System wide configuration file for JupyterHub</p> <p>If you are installing <code>stata_kernel</code> in Jupyter Hub you must create a system wide configuration file to provide default values. The default location is in <code>/etc/stata_kernel.conf</code>, or defined by the environmental variable <code>STATA_KERNEL_GLOBAL_CONFIG_PATH</code>.</p>"},{"location":"using_stata_kernel/configuration/#general-settings","title":"General settings","text":""},{"location":"using_stata_kernel/configuration/#stata_path","title":"<code>stata_path</code>","text":"<p>A string; the path on your file system to your Stata executable. Usually this can be found automatically during the install step, but sometimes may need to be set manually. This cannot be changed while using <code>%set</code>, and must be edited in the configuration file before starting Jupyter.</p>"},{"location":"using_stata_kernel/configuration/#cache_directory","title":"<code>cache_directory</code>","text":"<p>A string; the directory for the kernel to store temporary log files and graphs. By default, this is <code>~/.stata_kernel_cache</code>, where <code>~</code> means your home directory. You may wish to change this location if, for example, you're working under a Data Use Agreement where all related files must be stored in a specific directory.</p>"},{"location":"using_stata_kernel/configuration/#execution_mode","title":"<code>execution_mode</code>","text":"<p>macOS only, a string of either <code>\"automation\"</code> or <code>\"console\"</code>.</p> <p>This is the method through which <code>stata_kernel</code> communicates with Stata. <code>automation</code> uses Stata Automation while <code>console</code> controls the console version of Stata.</p> <p><code>console</code> is the default because it allows for multiple independent sessions of Stata to run at the same time, and can be faster. <code>automation</code> supports running <code>browse</code>, to bring up the Stata data explorer, however the <code>%browse</code> magic can also be used to inspect data within Jupyter (with either execution mode).</p> <p>On Windows, all communication with Stata happens through Stata Automation, because Stata console doesn't exist for Windows. On Linux/Unix all communication happens through the console, because Stata Automation doesn't exist for Linux/Unix.</p> Notice for StataIC Mac users <p>The main way that <code>stata_kernel</code> communicates with the running Stata session on macOS and Linux is with the console version of Stata. This runs in a terminal instead of with the Stata GUI. For no good reason StataCorp decided not to ship the console program with StataIC on macOS.</p> <p>To work around this, StataIC Mac users must use <code>automation</code> execution mode.</p> <p>On macOS, using Automation is slower than using console mode, but there's nothing I can do about it. I asked StataCorp why they don't ship a console version with StataIC on Mac, when they do on Linux. Basically you're not a \"power user\".</p> <p>Unix operating systems often have an optional graphical user interface so we need to include console versions of Stata for all flavors of Stata on those systems.</p> <p>The Mac operating system always has a graphical user interface so the console version of Stata on the Mac is a special tool that is included for power users. The Stata/IC for Mac is designed for regular Stata users and does not include a console version.</p> <p>Originally the Mac versions of Stata were just like the Windows versions and did not have any console support.</p> <p>- Stata Technical Support</p>"},{"location":"using_stata_kernel/configuration/#autocomplete_closing_symbol","title":"<code>autocomplete_closing_symbol</code>","text":"<p>either <code>True</code> or <code>False</code>; whether autocompletion suggestions should include the closing symbol (i.e. <code>'</code> for a local macro or <code>}</code> if the global starts with <code>${</code>). This is <code>False</code> by default.</p>"},{"location":"using_stata_kernel/configuration/#graph-settings","title":"Graph settings","text":"<p>These settings determine how graphs are displayed internally. Read here for more information about how <code>stata_kernel</code> displays graphs.</p>"},{"location":"using_stata_kernel/configuration/#graph_format","title":"<code>graph_format</code>","text":"<p><code>svg</code>, <code>png</code> or <code>eps</code>; the format to export graphs. By default this is <code>svg</code> for most operating systems and versions of Stata, but is <code>png</code> by default for Windows on Stata 14 and below. Note <code>eps</code> cannot be displayed by kernel front-ends and requires converting to <code>png</code> via <code>graph_epstopng_program</code>.</p>"},{"location":"using_stata_kernel/configuration/#graph_epstopng_program","title":"<code>graph_epstopng_program</code>","text":"<p>With <code>graph_format = eps</code>, a program to convert <code>eps</code> figures to <code>png</code> so they can be displayed by the kernel front-end. For example, on Linux the user can specify <code>graph_epstopng_program = convert -density 300 {0} -resize '900x600' {1}</code>.  (Note the name of the temporary graph files are passed to the program and the user must take that into account.)</p>"},{"location":"using_stata_kernel/configuration/#graph_scale","title":"<code>graph_scale</code>","text":"<p>a decimal number. This scales equally the width and height of plots displayed. By default, plots are 600 pixels wide.</p>"},{"location":"using_stata_kernel/configuration/#graph_width","title":"<code>graph_width</code>","text":"<p>an integer. This is the width in pixels of graphs displayed. If no <code>graph_height</code> is set, Stata will determine the optimal height for the specific image.</p>"},{"location":"using_stata_kernel/configuration/#graph_height","title":"<code>graph_height</code>","text":"<p>an integer. This is the height in pixels of graphs displayed.</p>"},{"location":"using_stata_kernel/configuration/#user_graph_keywords","title":"<code>user_graph_keywords</code>","text":"<p>a string. <code>stata_kernel</code> displays graphs by quietly inserting a <code>graph export</code> command after any command that creates a graph, and then loading and displaying the saved file. By default, it only looks for the base list of graph commands.</p> <p>If you use third party commands that generate figures, this option allows you to provide a list of commands that will also display graphs. Provide multiple graph names as a comma-delimited string, e.g. in the configuration file add:</p> <pre><code>user_graph_keywords = vioplot,coefplot\n</code></pre> <p>Note that when using the <code>%set</code> magic, the list of comma-delimited keywords must not have any spaces in it. For example, you must run</p> <pre><code>%set user_graph_keywords vioplot,coefplot\n</code></pre> <p>and not</p> <pre><code>%set user_graph_keywords vioplot, coefplot\n</code></pre>"},{"location":"using_stata_kernel/configuration/#graph_svg_redundancy","title":"<code>graph_svg_redundancy</code>","text":"<p>Whether to provide redundant PDF images when <code>svg</code> is the display format. <code>True</code> by default. For more information about what Graph Redundancy is, read here.</p>"},{"location":"using_stata_kernel/configuration/#graph_png_redundancy","title":"<code>graph_png_redundancy</code>","text":"<p>Whether to provide redundant PDF images when <code>png</code> is the display format. <code>False</code> by default. For more information about what Graph Redundancy is, read here.</p>"},{"location":"using_stata_kernel/configuration/#example-config-file","title":"Example config file","text":"<p>An example config file:</p> <pre><code>[stata_kernel]\nstata_path = \"C:\\Program Files\\Stata16\\StataMP-64.exe\"\nexecution_mode = automation\ncache_directory = ~/.stata_kernel_cache\nautocomplete_closing_symbol = False\ngraph_format = svg\ngraph_scale = 1\nuser_graph_keywords = coefplot,vioplot\n</code></pre>"},{"location":"using_stata_kernel/intro/","title":"Using the Stata Kernel","text":"<p><code>stata_kernel</code> is the bridge between Stata and the Jupyter ecosystem. It will work with any of the tools outlined in Using Jupyter. After installing and optionally configuring <code>stata_kernel</code>, it should be ready for use.</p> <p>I recommend browsing this example Jupyter Notebook file to see many of <code>stata_kernel</code>'s features in action. If you download that file and load it into JupyterLab, you can edit the cells to try it out interactively.</p>"},{"location":"using_stata_kernel/intro/#displaying-graphs","title":"Displaying graphs","text":"<p><code>stata_kernel</code> displays graphs by quietly inserting a <code>graph export</code> command after any command that creates a graph, and then loading and displaying the saved file. The advantage of this approach is that it will display all graphs created, even inside a loop or program, as long as that program was defined in text you run with the kernel.</p> <p>To minimize false positives, the graph keyword must appear at the beginning of a line. To hide the display of a graph, just prefix <code>graph</code> with <code>quietly</code>.</p>"},{"location":"using_stata_kernel/intro/#graph-not-displaying","title":"Graph not displaying?","text":"<p><code>stata_kernel</code> looks for graph commands in your code, and requires that these be the first non-whitespace characters on a given line. This means that if you prefix <code>scatter</code> with <code>quietly</code>, <code>noisily</code>, or <code>capture</code>, the graph won't be displayed.</p> <p>In order to force display of a graph, you can run: <pre><code>graph display\n</code></pre></p> <p><code>stata_kernel</code> checks your command against a list of graph commands, and only tries to export a graph if one matches. This means that some user-created commands that export graphs (e.g., <code>coefplot</code> or <code>vioplot</code>) won't work out of the box.</p> <p>To display graphs from user created commands, add the command name to the <code>user_graph_keywords</code> setting. You can do this either in the configuration file before starting the session or with <pre><code>%set user_graph_keywords command1,command2,...\n</code></pre> during the session.</p>"},{"location":"using_stata_kernel/intro/#graph-display-format","title":"Graph display format","text":"<p><code>stata_kernel</code> must export the image in some format in order to load and display it. Sadly, there are considerable pros and cons to each image format:</p> <ul> <li><code>png</code> files can't be created with the console version of Stata, and thus are off limits to the Linux and Mac (console) modes of <code>stata_kernel</code>. Additionally, they can look pixelated when scaled up.</li> <li><code>svg</code> files can be created by Stata 14 and 15 on all platforms, and look crisp at all sizes, but can't be used with LaTeX PDF output.</li> <li><code>pdf</code> files can be created by all recent versions of Stata on all platforms, look crisp at all sizes, and work in LaTeX PDF output, but JupyterLab is the only front end in which they'll display correctly.</li> <li><code>tif</code> files are too large.</li> </ul> <p><code>stata_kernel</code> lets you set the display format to be <code>png</code>, <code>svg</code>, or <code>pdf</code>.</p>"},{"location":"using_stata_kernel/intro/#graph-redundancy","title":"Graph redundancy","text":"<p>One of the many amazing things about Jupyter Notebooks is that with a single click, you can export the notebook to an aesthetic PDF using LaTeX.</p> <p>Except on Windows using Stata 14 or earlier, <code>stata_kernel</code> displays images in <code>svg</code> format by default. However, as noted above, these images can't be included in a LaTeX PDF export without conversion.</p> <p>To solve this problem, <code>stata_kernel</code> has the ability to hand Jupyter both the <code>svg</code> or <code>png</code> version of an image and the <code>pdf</code> version of the same image. While only the former will be displayed, the <code>pdf</code> version of the image will be stored in the Notebook and used when exported to PDF.</p> <p>While ease of use with LaTeX on macOS and Linux is a significant benefit, this redundancy does make <code>stata_kernel</code> delay slightly when displaying an image and enlarges the Jupyter Notebook file size (because two formats of every image will be stored within the Jupyter Notebook file).</p> <p>To turn off graph redundancy, change both configuration options to False:</p> <ul> <li><code>graph_svg_redundancy</code>: Whether to provide redundant PDF images when <code>svg</code> is the display format. <code>True</code> by default.</li> <li><code>graph_png_redundancy</code>: Whether to provide redundant PDF images when <code>png</code> is the display format. <code>False</code> by default.</li> </ul> <p>Because both image formats will be stored within the Jupyter Notebook file, <code>stata_kernel</code> will warn you if graph redundancy is on and an image is larger than 2 megabytes. To turn off this warning, set <code>graph_redundancy_warning</code> to <code>False</code>.</p>"},{"location":"using_stata_kernel/intro/#autocompletion","title":"Autocompletion","text":"<p>Based on the current Stata environment, <code>stata_kernel</code> will autocomplete variables, locals, globals, scalars, matrices, and file paths (as of version 1.6.0).</p> <p>As of version 1.6.0, file paths will only generate suggestions if there are no spaces in what you've typed. In the future I hope to relax this restriction, so that quoted file paths with spaces will still allow autocomplete.</p> <p>By default, autocomplete does not include the trailing character (such as a <code>'</code> for a local macro) when you select a suggestion. This is because front ends like Hydrogen already autocomplete the <code>'</code> for you after you type a <code>`</code>. If you're using a different front end, you can turn on the <code>autocomplete_closing_symbol</code> setting so that locals include the ending <code>'</code>.</p>"},{"location":"using_stata_kernel/intro/#delimit-mode","title":"<code>#delimit ;</code> mode","text":"<p>Stata lets you use <code>;</code> as a command delimiter in a do file after a line <code>#delimit ;</code>. This can be helpful when writing very long commands, like complicated graphs, as it allows for more free-flowing line wrapping. But Stata doesn't allow for running <code>;</code>-delimited code interactively, which makes debugging code difficult.</p> <p><code>stata_kernel</code> lets you code interactively with semicolons as the delimiter for commands within the <code>#delimit ;</code> mode. When activated, it first removes the extra line breaks in the input code and then removes the semicolon, resulting in the code's carriage return-delimited equivalent, which can then be sent to Stata.</p> <p>To turn this mode on, just run <code>#delimit ;</code>. To turn it off, run <code>#delimit cr</code>. To check the current delimiter, run <code>%delimit</code>. Code can switch back and forth between delimiters several times with no issue.</p> <p>Note that when the setting is enabled, sending code to Stata without a <code>;</code> at the end will be returned as invalid.</p>"},{"location":"using_stata_kernel/limitations/","title":"Limitations","text":"<p>Due to the architecture of <code>stata_kernel</code>, there is some usual functionality that won't work.</p>"},{"location":"using_stata_kernel/limitations/#log-files","title":"Log files","text":""},{"location":"using_stata_kernel/limitations/#log-files-have-extra-code-in-them","title":"Log files have extra code in them","text":"<p>In order to provide extra functionality like magics and autocomplete, <code>stata_kernel</code> runs a few extra commands in Stata after your command has completed. The downside of this is that all those extra commands and their output show up in user-created log files.</p> <p>In general, I recommend using <code>stata_kernel</code> to create Jupyter Notebooks, rather than using Stata's log file exporting.</p>"},{"location":"using_stata_kernel/limitations/#cant-run-log-close-_all-on-windows","title":"Can't run <code>log close _all</code> on Windows","text":"<p>Some people have <code>log close _all</code> as a standard command at the top of each script. On Windows and on macOS using Automation mode, this will break <code>stata_kernel</code> functionality, because that line closes the log file that it uses to receive communications.</p>"},{"location":"using_stata_kernel/magics/","title":"Magics","text":"<p>Magics are programs provided by <code>stata_kernel</code> that enhance the experience of working with Stata in Jupyter.</p> <p>All magics are special commands that start with <code>%</code>. They must be the first word of the cell or selection, otherwise they won't be intercepted and will be sent to Stata.</p> <p>For most of the magics listed, you can add <code>--help</code> to see a help menu in the kernel. For example, <pre><code>In [1]: %locals --help\nusage: %locals [-h] [-v] [REGEX [REGEX ...]]\n\npositional arguments:\n  REGEX          regex to match\n\noptional arguments:\n  -h, --help     show this help message and exit\n  -v, --verbose  Verbose output (print full contents of matched locals).\n</code></pre></p> <p>The magics that respond with richly formatted text, namely <code>%browse</code> and <code>%help</code>, will not work with Jupyter Console or Jupyter QtConsole, since they don't support displaying HTML.</p>"},{"location":"using_stata_kernel/magics/#browse-head-tail","title":"<code>%browse</code>, <code>%head</code>, <code>%tail</code>","text":"<p>Interactively view your dataset</p> <p>This can optionally be provided with a <code>varlist</code>, <code>N</code>, or <code>if</code>: <pre><code>%browse [-h] [N] [varlist] [if]\n%head [-h] [N] [varlist] [if]\n%tail [-h] [N] [varlist] [if]\n</code></pre></p> <p>By default:</p> <ul> <li><code>%browse</code> displays the first 200 rows</li> <li><code>%head</code> displays the first 10 rows</li> <li><code>%tail</code> displays the last 10 rows</li> </ul> <p>If you're using Windows or macOS with Automation mode, you can also run <code>browse</code> (without the <code>%</code>) and it will open the usual Stata data explorer.</p> Atom Jupyter Notebook"},{"location":"using_stata_kernel/magics/#delimit","title":"<code>%delimit</code>","text":"<p>Print the current delimiter</p> <p>This takes no arguments; it prints the delimiter currently set: either <code>cr</code> or <code>;</code>. If you want to change the delimiter, use <code>#delimit ;</code> or <code>#delimit cr</code>. The delimiter will remain set until changed.</p> <pre><code>In [1]: %delimit\nThe delimiter is currently: cr\n\nIn [2]: #delimit ;\ndelimiter now ;\nIn [3]: %delimit\nThe delimiter is currently: ;\n\nIn [4]: #delimit cr\ndelimiter now cr\n</code></pre>"},{"location":"using_stata_kernel/magics/#help","title":"<code>%help</code>","text":"<p>Display a help file in rich text</p> <pre><code>%help [-h] command_or_topic_name\n</code></pre> <p>Add the term you want to search for after <code>%help</code>: <pre><code>In [1]: %help histogram\n</code></pre></p> <p>The terms in italics (Atom) or underlined (Jupyter Notebook) are links. Click on them to see another help menu.</p> Atom Jupyter Notebook"},{"location":"using_stata_kernel/magics/#html-latex","title":"<code>%html</code>, <code>%latex</code>","text":"<p>Display command output as HTML or LaTeX</p> <p>This can be useful when creating regression tables with <code>esttab</code>, for example. The images below are run following</p> <pre><code>sysuse auto\neststo: qui regress price weight mpg\neststo: qui regress price weight mpg foreign\n</code></pre> <p>An HTML table will display correctly both inside JupyterLab and as a saved HTML file.</p> JupyterLab Saved HTML file <p>A LaTeX table will not display correctly within JupyterLab (it only supports the math subset of LaTeX) but it will render correctly upon export to a PDF (which happens through LaTeX).</p> Saved PDF file Saved HTML file"},{"location":"using_stata_kernel/magics/#locals-globals","title":"<code>%locals</code>, <code>%globals</code>","text":"<p>List local or global macros</p> <pre><code>%locals [-h] [-v] [REGEX [REGEX ...]]\n%globals [-h] [-v] [REGEX [REGEX ...]]\n</code></pre> <p>These take two optional arguments:</p> <ol> <li>a regular expression for filtering the locals or globals displayed</li> <li>a <code>--verbose</code> flag</li> </ol> <pre><code>In [1]: %globals S_\n(note: showing first line of global values; run with --verbose)\n\nS_ADO:     BASE;SITE;.;PERSONAL;PLUS;OLDPLACE;`\"/home/kyle/github/stata/sta\nS_level:   95\nS_CONSOLE: console\nS_FLAVOR:  Intercooled\nS_OS:      Unix\nS_MACH:    PC (64-bit x86-64)\n\nIn [2]: %globals S_ --verbose\nS_ADO:     BASE;SITE;.;PERSONAL;PLUS;OLDPLACE;`\"/home/kyle/github/stata/sta\n           &gt; ta_kernel/stata_kernel/ado\"'\nS_level:   95\nS_CONSOLE: console\nS_FLAVOR:  Intercooled\nS_OS:      Unix\nS_MACH:    PC (64-bit x86-64)\n</code></pre>"},{"location":"using_stata_kernel/magics/#set","title":"<code>%set</code>","text":"<p>Set configuration value</p> <p>Usage: <pre><code>%set [-h] [--permanently] [--reset] key value\n</code></pre></p> <ul> <li><code>key</code>: Configuration key name. The full list of configuration options is shown on the Configuration page.</li> <li><code>value</code>: Value to set.</li> <li><code>--permanently</code>: Store settings permanently.</li> <li><code>--reset</code>: Restore default settings.</li> </ul> <p>As an example, you can change the graph settings like so:</p> <pre><code>%set graph_format svg --permanently\n%set graph_scale 1\n%set graph_width 500\n%set graph_height 300\n</code></pre>"},{"location":"using_stata_kernel/magics/#show_gui-hide_gui","title":"<code>%show_gui</code>, <code>%hide_gui</code>","text":"<p>Show/hide the Stata Graphical User Interface (GUI). Only works on Windows (and Mac if using automation execution mode)\"</p>"},{"location":"using_stata_kernel/magics/#status","title":"<code>%status</code>","text":"<p>Print information about:</p> <ul> <li>Stata kernel version</li> <li>Whether you're in Stata/Mata</li> <li>Current delimiter</li> </ul>"},{"location":"using_stata_kernel/troubleshooting/","title":"Troubleshooting","text":""},{"location":"using_stata_kernel/troubleshooting/#installation","title":"Installation","text":"<ul> <li> <p>If the <code>pip install</code> step gives you an error like \"DEPRECATION: Uninstalling a distutils installed project (pexpect) has been deprecated\", try</p> <pre><code>pip install stata_kernel --ignore-install pexpect\n</code></pre> </li> <li> <p>If you have multiple installations of Python on your machine, make sure you run <code>python -m stata_kernel.install</code> during installation with the same Python executable as the one you usually use. This matters especially when using several Python virtual environments. You'll need to install <code>stata_kernel</code> within each environment you use.</p> </li> </ul>"},{"location":"using_stata_kernel/troubleshooting/#graphs-wont-display","title":"Graphs won't display","text":"<ul> <li>If you're using a user-written command to generate your graph, you'll need to add that command to the list of graph keywords.</li> <li> <p>If you're on Windows and using Edge as your browser, SVG images won't work. This is a known issue.</p> <p>Easy solutions:</p> <ul> <li>Don't use Internet Explorer/Edge</li> <li> <p>Set the graph format to PNG instead of SVG. Run one of the following to change the graph's storage format:</p> <pre><code>%set graph_format png\n%set graph_format png --permanently\n</code></pre> </li> </ul> </li> </ul>"}]}